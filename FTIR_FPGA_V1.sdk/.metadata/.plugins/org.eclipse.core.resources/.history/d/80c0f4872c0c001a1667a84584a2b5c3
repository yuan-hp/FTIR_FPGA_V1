/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include "system.h"

//////////////////////////////////////////////////////////////////////////////////////
#define INTC_DEVICE_ID	XPAR_SCUGIC_SINGLE_DEVICE_ID

unsigned char Cpu0_Data[12] = "Hello Cpu1!" ;

#define SHARE_BASE  0x3FFFFF00
u32 CPU0 = 0x1 ;
u32 CPU1 = 0x2 ;


u16 SoftIntrIdToCpu0 = 1 ;
u16 SoftIntrIdToCpu1 = 2 ;
u16 TTC0SoftIntrIdToCpu1 = 3 ;
u16 TTC1SoftIntrIdToCpu1 = 4 ;
u16 LaserSoftIntrIdToCpu1 = 5 ;
u16 ZeroCheckIntrIdToCpu1 = 6 ;

unsigned char Cpu1_Data[12] = "Hello Cpu0!" ;
unsigned char *Cpu0Data ;

int InterruptInit(XScuGic *InstancePtr, u16 DeviceId);
int InterruptConnnect(XScuGic *InstancePtr, u16 IntId, void * Handler,void *CallBackRef) ;


//////////////////////////////////////////////////////////////////////////////////////
int main()
{
	xil_printf("CPU1 started\r\n");
    init_platform();

    int Status = InterruptInit(&LinIntcInstance, INTC_DEVICE_ID) ;
    if (Status != XST_SUCCESS)return XST_FAILURE;

	///////////////////////////////////
	ProcessFlag=ResetFlag;//开机复位
	SystemReset();
	///////////////////////////////////
    PWMOutInit();
    LaserFreqMeasureInit();
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  InterruptConnnect(&LinIntcInstance, SoftIntrIdToCpu1, (void *)SoftHandler,(void *)&LinIntcInstance);LaserPeriority
//  XScuGic_SetPriorityTriggerType(&LinIntcInstance,SoftIntrIdToCpu1,0, 0);
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //InterruptConnnect(&LinIntcInstance, LaserSoftIntrIdToCpu1, (void *)LaserSoftHandler, (void *)&LinIntcInstance);XScuGic_SetPriorityTriggerType(&LinIntcInstance,LaserSoftIntrIdToCpu1,LaserPeriority, 0b11);


    //InterruptConnnect(&LinIntcInstance, TTC0SoftIntrIdToCpu1, (void *)TTC0SoftHandler, (void *)&LinIntcInstance);XScuGic_SetPriorityTriggerType(&LinIntcInstance,TTC0SoftIntrIdToCpu1,TTC0Periority, 0b11);


    //InterruptConnnect(&LinIntcInstance, TTC1SoftIntrIdToCpu1, (void *)TTC1SoftHandler, (void *)&LinIntcInstance);XScuGic_SetPriorityTriggerType(&LinIntcInstance,TTC1SoftIntrIdToCpu1,TTC1Periority, 0b11);


    //InterruptConnnect(&LinIntcInstance, ZeroCheckIntrIdToCpu1, (void *)ZeroCheckSoftHandler, (void *)&LinIntcInstance);XScuGic_SetPriorityTriggerType(&LinIntcInstance,ZeroCheckIntrIdToCpu1,ZeroCheckPeriority, 0b11);

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
    void posidure(void);
//  test_main();//单独模块测试函数
  SetOutput(10000);//输出测试
    while(1)
    {
//    	MirrorSpeed=LaserFreqMeasure();                       //计算动镜速度
//    	sleep(2);
//    	char str[50];
//    	sprintf(str,"%d_abc\r\n",MirrorSpeed);
//    	xil_printf(str);

    	sleep(2);
    	SetOutput(10000);//输出测试
    	sleep(2);
    	SetOutput(-10000);//输出测试

//    	sleep(2);
//    	xil_printf("Hello World\n\r");
//    	xil_printf("Hello World%d\n\r",XTtcPs_GetCounterValue(Httc_GetTimerInst(1,0)));
//    	posidure();
//    	sleep(1);
//    	Hmfreq_PsPushMoveDir2PL(HMFREQ_LOW);//通知PL部分动镜的移动方向为0
//    	sleep(1);
//    	Hmfreq_PsPushMoveDir2PL(HMFREQ_HIGH);//通知PL部分动镜的移动方向1

//    	xil_printf("2running");

    	//usleep(1);
    }

    cleanup_platform();
    return 0;
}

int InterruptInit(XScuGic *InstancePtr, u16 DeviceId)
{
	XScuGic_Config *IntcConfig;
	int Status ;

	IntcConfig = XScuGic_LookupConfig(DeviceId);

	Status = XScuGic_CfgInitialize(InstancePtr, IntcConfig, IntcConfig->CpuBaseAddress) ;
	if (Status != XST_SUCCESS)
		return XST_FAILURE ;

	/*
	 * Initialize the  exception table
	 */
	Xil_ExceptionInit();

	/*
	 * Register the interrupt controller handler with the exception table
	 */
	Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_INT,
			(Xil_ExceptionHandler)XScuGic_InterruptHandler,
			InstancePtr);

	/*
	 * Enable non-critical exceptions
	 */
	Xil_ExceptionEnable();
	return XST_SUCCESS ;

}


int InterruptConnnect(XScuGic *InstancePtr, u16 IntId, void * Handler,void *CallBackRef)
{
	XScuGic_Connect(InstancePtr, IntId,
			(Xil_InterruptHandler)Handler,
			CallBackRef) ;

	XScuGic_Enable(InstancePtr, IntId) ;
	return XST_SUCCESS ;
}

//void posidure(void)
//{
//	if(ProcessFlag==DebugFlag)  //调试模式，进去了就出不来。激光信号消失时会进入
//	{
//		//SetOutput(-4500);
//		SetOutput(0);
//
//		if(newtr<1000)
//		//if(stopcount>50)
//		{
//			newtr=2000;
//			char str[50];
//			for(int i=0;i<stopcount;i++)
//			{
//				sprintf(str,"%d,",speedtestbuffer[i]);
//				//HAL_UART_Transmit(&huart1,(uint8_t*)str,strlen(str),1000);
//			}
//			sprintf(str,"\n\n\n\n\n");
//			//HAL_UART_Transmit(&huart1,(uint8_t*)str,strlen(str),1000);
//			for(int i=0;i<stopcount;i++)
//			{
//				sprintf(str,"%d,",outtestbuffer[i]);
//				//HAL_UART_Transmit(&huart1,(uint8_t*)str,strlen(str),1000);
//			}
//			sprintf(str,"\n\n\n\n\n");
//			//HAL_UART_Transmit(&huart1,(uint8_t*)str,strlen(str),1000);
//			for(int i=0;i<stopcount;i++)
//			{
//				sprintf(str,"%d,",outxbuffer[i]);
//				//HAL_UART_Transmit(&huart1,(uint8_t*)str,strlen(str),1000);
//			}
//			sprintf(str,"\n\n\n\n\n");
//			//HAL_UART_Transmit(&huart1,(uint8_t*)str,strlen(str),1000);
//			for(int i=0;i<stopcount;i++)
//			{
//				sprintf(str,"%d,",outybuffer[i]);
//				//HAL_UART_Transmit(&huart1,(uint8_t*)str,strlen(str),1000);
//			}
//		 }
//	}
//	if(ProcessFlag==ContinueFlag)
//	{
//		ResetCount += 1;
//
//		if(ResetCount>WaitCount/2)
//		{
//			ResetCount=0;
//		  ProcessFlag = preStartFlag;
//		}
//	}
//	if(ProcessFlag==ResetFlag)  //复位流程，进行初始化操作，一定延时后跳出
//	{
//		SystemReset();
//		PIDInit();
//		PhasePIDInit();
//		ResetCount += 1;
//
//		SetOutput(0);
//
//		if(ResetCount>WaitCount)
//		{
//			ResetCount=0;
////			OutValue=3000;
////			OutputDrive();
//		  ProcessFlag = preStartFlag;
//		}
//	}
//	if(ProcessFlag==preStartFlag)//预加速流程
//	{
//		preStartMove();//加速之前给一个初始输出，缩短加速时间
//		ProcessFlag = StartFlag;
//		if(NeedReset==1)
//			ProcessFlag = ResetFlag;
//	}
//		//if((ProcessFlag==StartFlag)&&(IsNewSpeed==1))                                       //开环
//	if(ProcessFlag==StartFlag)   //开环加速流程
//	{
//		//IsNewSpeed = 0;
//		StartStopCount++;
//		if(StartStopCount>50)//50平超11000；40上超11250；//60下超10650
//		{
//			StartStopCount=0;
//			MovingMirrorSpeedUp();
//		}
//		////////////////////////////////////////////////////////////////////////////
//		if((ReadSpeed[0]>=StartSpeedTarget)&&(ReadSpeed[1]>=StartSpeedTarget)&&(ReadSpeed[0]<=StartSpeedTarget+1000)&&(ReadSpeed[1]<=StartSpeedTarget+1000)&&(fabs(OutValue)>2000))//达到目标速度后跳出，开始PID
////		if((ReadSpeed[0]>=StartSpeedTarget)&&(ReadSpeed[1]>=StartSpeedTarget))//达到目标速度后跳出，开始PID
////		if((ReadSpeed[0]>=StartSpeedTarget)&&(ReadSpeed[1]>=StartSpeedTarget)&&(abs(OutValue)>2000))//达到目标速度后跳出，开始PID
//		{
//			//UartSendFlag=1;
//			if(MoveDirection==MoveGoToSplitter)
//			{
//
//				//DIROUT_1;   //给采集板方向信号，高电平//PG7
//			}
//			if(MoveDirection==MoveAwaySplitter)
//			{
//
//				//DIROUT_0;//给采集板方向信号，低电平
//			}
//			ProcessFlag=PIDCtrlFlag;
//				//ProcessFlag=ResetFlag;
//		}
//
//		if(NeedReset==1)
//			ProcessFlag = ResetFlag;
//
//	}
//
//	//if((ProcessFlag==StopFlag)&&(IsNewSpeed==1))
//	if(ProcessFlag==StopFlag)																								//减速流程
//	{
//		//IsNewSpeed = 0;
//		IsNewPulse = 0;
//		UartSendFlag=0;
//
//		if(MoveDirection==MoveGoToSplitter)
//		{
//			if(OutValue>AccStopPreset)OutValue=AccStopPreset;
//			if(OutValue>-AccStopWall)//-5800
//				OutValue-=GotoStopRate;		//16
//			OutputDrive();
//		}else if(MoveDirection==MoveAwaySplitter)
//		{
//			if(OutValue<-AccStopPreset)OutValue=-AccStopPreset;
//			if(OutValue<AccStopWall)//6300
//				OutValue+=AwayStopRate;   //15
//			OutputDrive();
//		}
//		if(MirrorSpeed<StopSpeedTarget)//3500
//		{
//			//方向标志应做改变
//			if(MoveDirection==MoveGoToSplitter)
//				MoveDirection=MoveAwaySplitter;
//			else
//				MoveDirection=MoveGoToSplitter;
//			//ProcessFlag=StartFlag;
//
//			if(MoveDirection==MoveGoToSplitter)
//			{
//				//DIROUT_1;   //给采集板方向信号，高电平//PG7
//			}
//			if(MoveDirection==MoveAwaySplitter)
//			{
//				//DIROUT_0;//给采集板方向信号，低电平
//			}
//			ProcessFlag=preStartFlag;
//			//ProcessFlag=ResetFlag;
//		}
//		if(NeedReset==1)
//			ProcessFlag = ResetFlag;
//	}
//
//	//if((abs(PassedDistance)>7600)&&(ProcessFlag!=ResetFlag))
//	if((fabs(PassedDistance)>4096)&&(ProcessFlag!=ResetFlag))
//	{
//		if(newtr<990)
//		{
//			if(newtest==1)
//			{
//				newtest=0;
//				speedtestbuffer[newtr]=MirrorSpeed;
//				outtestbuffer[newtr]=OutValue;
//				outxbuffer[newtr]=ProcessFlag*1000;
//				outybuffer[newtr]=PassedDistance;
//
//				newtr++;
//			}
//		}
//	}
//	else
//	{
//		if(newtr!=0)stopcount=newtr;
//		if(ProcessFlag!=DebugFlag)newtr = 0;
//
//	}
//}


