/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include "system.h"

//////////////////////////////////////////////////////////////////////////////////////
#define INTC_DEVICE_ID	XPAR_SCUGIC_SINGLE_DEVICE_ID

unsigned char Cpu0_Data[12] = "Hello Cpu1!" ;

#define SHARE_BASE  0x3FFFFF00
u32 CPU0 = 0x1 ;
u32 CPU1 = 0x2 ;


u16 SoftIntrIdToCpu0 = 1 ;
u16 SoftIntrIdToCpu1 = 2 ;
u16 TTC0SoftIntrIdToCpu1 = 3 ;
u16 TTC1SoftIntrIdToCpu1 = 4 ;
u16 LaserSoftIntrIdToCpu1 = 5 ;
u16 ZeroCheckIntrIdToCpu1 = 6 ;

unsigned char Cpu1_Data[12] = "Hello Cpu0!" ;
unsigned char *Cpu0Data ;

int InterruptInit(XScuGic *InstancePtr, u16 DeviceId);
int InterruptConnnect(XScuGic *InstancePtr, u16 IntId, void * Handler,void *CallBackRef) ;


//////////////////////////////////////////////////////////////////////////////////////
int main()
{
	xil_printf("CPU1 started\r\n");
    init_platform();

    int Status = InterruptInit(&LinIntcInstance, INTC_DEVICE_ID) ;
    if (Status != XST_SUCCESS)return XST_FAILURE;
    //test_main();
	///////////////////////////////////
	ProcessFlag=ResetFlag;//开机复位

	ProcessFlag = 100;//禁止启动

	SystemReset();
	///////////////////////////////////
    PWMOutInit();
    LaserFreqMeasureInit();
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  InterruptConnnect(&LinIntcInstance, SoftIntrIdToCpu1, (void *)SoftHandler,(void *)&LinIntcInstance);LaserPeriority
//  XScuGic_SetPriorityTriggerType(&LinIntcInstance,SoftIntrIdToCpu1,0, 0);
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    InterruptConnnect(&LinIntcInstance, LaserSoftIntrIdToCpu1, (void *)LaserSoftHandler, (void *)&LinIntcInstance);XScuGic_SetPriorityTriggerType(&LinIntcInstance,LaserSoftIntrIdToCpu1,LaserPeriority, 0b11);


    //InterruptConnnect(&LinIntcInstance, TTC0SoftIntrIdToCpu1, (void *)TTC0SoftHandler, (void *)&LinIntcInstance);XScuGic_SetPriorityTriggerType(&LinIntcInstance,TTC0SoftIntrIdToCpu1,TTC0Periority, 0b11);


    //InterruptConnnect(&LinIntcInstance, TTC1SoftIntrIdToCpu1, (void *)TTC1SoftHandler, (void *)&LinIntcInstance);XScuGic_SetPriorityTriggerType(&LinIntcInstance,TTC1SoftIntrIdToCpu1,TTC1Periority, 0b11);


    InterruptConnnect(&LinIntcInstance, ZeroCheckIntrIdToCpu1, (void *)ZeroCheckSoftHandler, (void *)&LinIntcInstance);XScuGic_SetPriorityTriggerType(&LinIntcInstance,ZeroCheckIntrIdToCpu1,ZeroCheckPeriority, 0b11);

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  test_main();//单独模块测试函数
  SetOutput(10000);//输出测试
    while(1)
    {
//    	MirrorSpeed=LaserFreqMeasure();                       //计算动镜速度
//    	sleep(2);
//    	char str[50];
//    	sprintf(str,"%d_abc\r\n",MirrorSpeed);
//    	xil_printf(str);

//    	sleep(2);
//    	xil_printf("Hello World\n\r");
//    	xil_printf("Hello World%d\n\r",XTtcPs_GetCounterValue(Httc_GetTimerInst(1,0)));

    }

    cleanup_platform();
    return 0;
}

int InterruptInit(XScuGic *InstancePtr, u16 DeviceId)
{
	XScuGic_Config *IntcConfig;
	int Status ;

	IntcConfig = XScuGic_LookupConfig(DeviceId);

	Status = XScuGic_CfgInitialize(InstancePtr, IntcConfig, IntcConfig->CpuBaseAddress) ;
	if (Status != XST_SUCCESS)
		return XST_FAILURE ;

	/*
	 * Initialize the  exception table
	 */
	Xil_ExceptionInit();

	/*
	 * Register the interrupt controller handler with the exception table
	 */
	Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_INT,
			(Xil_ExceptionHandler)XScuGic_InterruptHandler,
			InstancePtr);

	/*
	 * Enable non-critical exceptions
	 */
	Xil_ExceptionEnable();
	return XST_SUCCESS ;

}


int InterruptConnnect(XScuGic *InstancePtr, u16 IntId, void * Handler,void *CallBackRef)
{
	XScuGic_Connect(InstancePtr, IntId,
			(Xil_InterruptHandler)Handler,
			CallBackRef) ;

	XScuGic_Enable(InstancePtr, IntId) ;
	return XST_SUCCESS ;
}




